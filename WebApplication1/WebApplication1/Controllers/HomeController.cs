using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication1.Models;
using WebApplication1.Models.Entities;

namespace WebApplication1.Controllers
{
    [Route("")]
    public class HomeController : Controller
    {
        private BloggingContext _context;

        public HomeController(BloggingContext context)
        {
            _context = context;
        }

        [Route("init")]
        public async Task<ActionResult> Init()
        {
            var dateString = DateTime.Now.ToString("h:mm:ss tt zz");
            var classifications = new List<MainClassification>()
            {
                new()
                {
                    CompanyId = 1,
                    FieldId = 1,
                    Name = "Name 1",
                    Order = 1,
                    RowVersion = new byte[1] { Byte.MaxValue },
                    CreatedAt = DateTime.Now,
                    CreateUserId = $"user id {dateString}",
                    DeletedAt = DateTime.MinValue,
                    SubClassification = new List<SubClassification>()
                    {
                        new()
                        {
                            CreatedAt = DateTime.Now,
                            DeletedAt = DateTime.MinValue,
                            Name = $"Sub 1 {dateString}",
                            CreateUserId = "user 1",

                            Order = 1,

                        },
                        new()
                        {
                            CreatedAt = DateTime.Now,
                            DeletedAt = DateTime.MinValue,
                            Name = $"Sub 2 {dateString}",
                            CreateUserId = "user 1",

                            Order = 2,

                        }
                    }

                }
            };
            await _context.AddRangeAsync(classifications);
            await _context.AddRangeAsync(new List<Status>()
            {
                new ()
                {
                    Name = $"status 1 {dateString}",
                    Color = $"color 1 {dateString}"
                },
                new()
                {
                    Name = $"status 2 {dateString}",
                    Color = $"color 2 {dateString}"
                },
            });

            await _context.AddRangeAsync(new List<DrawingCategory>()
            {
                new()
                {
                    Name = $"drawing category 1 {dateString}",
                },
                new()
                {
                    Name = $"drawing category 2 {dateString}",
                },
            });


            await _context.AddRangeAsync(new List<RoutingSlips>()
            {
                new()
                {
                    Name = $"routing slip 1 {dateString}",
                    FieldId = 1,
                    Order = 1,
                    CompanyId = 1,
                },
                new()
                {
                    Name = $"routing slip 2 {dateString}",
                    FieldId = 1,
                    Order = 1,
                    CompanyId = 1,
                },
            });


            await _context.AddRangeAsync(new List<Status>()
            {
                new()
                {
                    Name = $"status 1 {dateString}",
                    Color = $"color 1 {dateString}"
                },
                new()
                {
                    Name = $"status 2 {dateString}",
                    Color = $"color 2 {dateString}"
                },
            });


            await _context.ConstructionDrawings.AddAsync(new ConstructionDrawing()
            {
                SubClassification = new SubClassification()
                {
                    Name = $"sub 1 {dateString}",
                    MainClassification = new MainClassification()
                    {
                        Name = $"cat 1 {dateString}",
                        Order = 1
                    },
                    Order = 1,
                },
                Name = $"Construction drawing 1 {dateString}",
                Order = 1,
                FieldId = 1,
                ReviewDrawings = new List<ReviewDrawing>()
                {

                }
            });
            var firstContent = new ReviewDrawing()
            {
                Name = $"review drawing 1 {dateString}",
                Status = new Status()
                {
                    Color = $"color 0 {dateString}",
                    Name = $"status 0 {dateString}",
                },
                ReviewType = new ReviewType()
                {
                    Name = $"review type 1 {dateString}",
                    FieldId = 1,
                    DrawingCategory = new DrawingCategory()
                    {
                        Name = $"Drawing category {dateString}",

                    },

                },
                ReviewsProgresses = new List<ReviewProgress>()
                {
                    new ReviewProgress()
                    {
                        ReturnDate = DateTime.MinValue,
                        ScheduledReturnDate = DateTime.Now,
                        SubmissionDate = DateTime.MinValue,
                        ReviewerUseFlag = true,
                        RoutingSlips = new RoutingSlips()
                        {
                            Name = $"routing slip 1 {dateString}",
                            FieldId = 1,
                            Order = 1,
                            CompanyId = 1,

                        }
                    },
                    new ReviewProgress()
                    {
                        ReturnDate = DateTime.MinValue,
                        ScheduledReturnDate = DateTime.Now,
                        SubmissionDate = DateTime.MinValue,
                        ReviewerUseFlag = true,
                        RoutingSlips = new RoutingSlips()
                        {
                            Name = $"routing slip 2 {dateString}",
                            FieldId = 1,
                            Order = 1,
                            CompanyId = 1,

                        }
                    }
                }
            };
            var listCOntent = new List<ReviewDrawing>()
            {
                firstContent
            };
            firstContent.Name += dateString;
            listCOntent.Add(firstContent);
            await _context.SaveChangesAsync();
            return Ok();
        }
        [Route("")]
        public async Task<ActionResult> Index()
        {
            Result.virusIndices("cgatcg","gc");
            return Ok();

            var dd = Result.stringSimilarity("");
            var a =
                "MZBMWEYYDIADTLCOUEGMDBYFWURPWBPUVHIFNUAPWYNDMHTQVKGKBHTYTSZOTWFLEGSJZZSZFWTZFPNSCGUEMWRCZQXYCIVDQNKYPNXNNPMUDUHZNOAQUUDHAVRNCWFWUJPCMIGGJMCMKKBNJFEODXKGJGWXTRXINGIQQUHUWQHDSWXXRXUZZFHKPLWUNFAGPPCOILDAGKTGDARVEUSJUQFISTULGBGLWMFGZRNYXRYETWZHLNFEWCZMNOOZLQATUGMDJWGZCFABBKOXYJXKATJMPPRSWKDKOBDAGWDWXSUFEESRVNCBSZCEPIGPBZUZOOOTORZFSKCWBQORVWDRMKLFDCZATFARQDKELALXZXILLKFDVPFPXABQLNGDSCRENTZAMZTVVCVRTCMBQLIZIJDWTUYFRXOLSYSXLFEBPOLCMQSPPMRFKYUNYDTMWBEXSNGXHWVROANDFQJAMZKPTTSLILDLRKJOYRPXUGICEAHGIAKEVSJOADMKFNKSWRAWKJXWCMCCIABZBRSKZAZJQTLKIQYDPTPKCSDGCQJSHZNDPVANNRYWFRNRGHLJJQRXPXNLKCWDPDKSWVTXGANWWYOOSXTNEXEEZJXOUYFJHNWPQFXEXZXFOLPCFBLPNCETYHTRWXKBOSCCSKXBUVCROSAVNPXZOEOYYGHBBQKFLSUTPWMHQWKVIRMLFCPIDLQYIKZMNTTAIFCBOPNWEZESOMKXHAIAFMVKBJAISYRBTULTPNXBCJMORNQUMATSERHIEQGGRIVOUWFNBNGHDFALLCPRVNGIKCAMVPRZAEAPQMILWKBKGOGOCNIAAISORFQXZJZTVCGVZLCEDWNEZBWXMPOBMRVXASKWVVWQUUDRNWHMMZHEQXIWHFUXAVLWFTGYXXHPYGSPVWDNVMGNWNPKDRNZNZVRKMJJMWISYRDKODOAFWSJFUVMEEWPDWPIYMWBHOXEBJIBXPHIEFGTSAWCDIVTLTRSHJQNKKMDTJGSCNOZMOJNHIGIPPJEMZZZBCVOYPLXENFFMFDZDIOJUODGBULVIVHTBHAYEEEBIACTYAOVQBIVUDYDGXWSGMHLRACAAYIPSOJLEQHPYGSHCVXWWLNEBLFMNQGDDQPCJXZFTWRLGPTRKBKRLWGSNLCAUDZDUJBBQLFZIKGXOHVHTUVCJMMWVHKXCGYEKJKKLCJQONEPPYDPSPIWQBKPSUNEDQIXLSIFCOKFRCVRSZCVDYFWUHTZPTBBNXBHQJOMXRBHJQXVDASERFFCVKECQYLQPRAWYQUEVHVUZCVFMBEWPXICSKPMZSBSUSMADDQKWGFIRLZZBCZEGHMUHXNXEJRSPCVQEJWOWQSFHOVHCTWNHUUVEPRRIYFWSTSJDECYYFJBJSDLEGQLKLXIYRWVLPPOMDFDTVTKWOKIWWPEJXIBDKNPONPSXRYTOQGJRTJPATMDLHMQEGVJHVLEHSYKRLVVSSMAMBZUSXUSZYYBDRDVZDBEXSGLYOKVMYKIFWGFNCSACJLKATHFMNLCTSQEJFOXYVMTOTTLHRLYPBZISUCLLQGAAITMXPMFINSOWJAAWSNMLUIZVPJBEWQCIPCQWVSQFBEUTDCSDRVIOZOBDYTWSIMSEETQCKLNKXTAWOXIYSVZRAKQEISPNDDXTNFQALSWXSMKSFOOIWXYNAMDJXNSMKIEWKWDPZJPKIBCBBMZBIWPMJCZCEHTCZQJZLKGYVSZPUUVETDFLUUHXPEOPUXMDYLAYSTTENJMCEDCUMOEEICJTXKKVXCXJOWRCVLTTSQHWKBBMIGTQLOVJGVIYZGCQJVPVOTWUCSETIDICYHTCMAJPHXYYOOEOVUXVUPLOKLPBOVQDWDYPBXGAJUQWADGEEDJKGURHSXDVYLMYFJQLWZLDROUYLQOBSGEMWDOIBQVCYEDFVQOPFHKQMHUSXQACOOGJXCOXBFZLWCXFVQAAVFEGKCIRQQGDYHLJMAQZQIFUAOUBUKYPAVEBVDUJGSULAHKPRFPNZQAQGVFDXWTQFLCEILPMSZIZFWBONXPLCYQITTPKPBCFSESGFBIQNIPOLEFRELPHJTHQRZSPHBNUMGRIFMWIZTFUHQIBGAXDVYSYVGXLSPMINYKBYUMEPUBRXUOAVYOVDBIELZDOBGQCJZNJBEXALKGHYWIOXZBVXZFCSHCOZMEFWCRVYIBJDFQVQMHXDPCCJODLGVKPLRFDEDPZOPRFEECHWSZHVCDOOEJLCHCWCEKTFRDMOWHSUEAVBRAWMIHZSNFHRAFBQEAWDIXZNPPFWIEAIVTMPQZQTSVNVWJMGVHUESSSAXGMOYWDGVWIOUZUQDEBIJCQYCFTAFTUWTGXAVEMCIUQMXENPRPMYZREXSHNVTESSTWHYTMATXBUZXPSTPYGFXPHPFCKJDBFBXIMEESWYNDFHOMCNWJTFRUVZWBHLZBVEBYEUCEPGCDPMGHCIBFXGRVNACXWLOPXSVZCLWYMWDMOLJTAGUWUVHXIFDJQSHLQAUEGLQRBXUWPOZFVEGDPVNWMEDXBMXAGIMXMXGJLNNFKWBRQSHXFCANWPOFLQEJAFDKTNLPGVLEXCYGLRZBKHCMXVUOBYXCXZXQMLSWVLMBVCSDTEFCQTMLILWZTBSCFHJTCYTONMLIIVRKBBLVNMHIPRGERYRPJPJYKCHNEYFYMIEFYMAJRNWJSLYTBXMDUWTFZAFKXYFMCNLJSEBZLEYGEGUUJMKYYLFMMVVILJWGCYHRDLDKZFZGTVMOWLBEQTJSODVHBUUMEXPPCDXQHCEQLDFAVGQLVITUZZNGJEOTBKJZCRTGGLUIAMNCORBKIWDOZITQGQIPHVWUIJWHSMGOGXOMLUQURCWOGGHHJJCEKGGLLAMQGXHCFCMRAKGROJGXIZWXASCASINZXCDXEWCULOFITYLHXHZXMJDLISUPDYLSHAHCIPZOPTULLYISXSCZJQAWAGNNGCGGIWKHNARJISVCDPZGGTLLUDVCSJXEUBFGYJDIMTPFTGYTKFNTYLNFLBFUTSYOVXMLIGOAIQZLXWFRSLJUCDXSSAMGCIFDLJASHCJJWHLKQNIPXZJGLPTEDZXMTHVZGRUHHCKUFDECAKRRZOQFQCDUZHJSDASKQGLQLNNBKUUYTQTHFCJRAAWTBCCURPZPUMCSMQHEBHQRFIGAMBLZXYCVEVLUZCUQXVRJGEKYAOFVRVCOHLDAVKJIYKHCCMNJPDHKKIMPSMVCYQXLGWLBHLDKJLZWTHKFNIZEBVLGOZRNWWVXDCKGNCKQTKQIDHOOCIWRPKXESLDTGXTAURGLBGMPYQLPZBNSBZHANBIYPUZIQURWRBRBXMHBRDPDRERBOBAJULDLWRPKRTFBLSPNKXYITIOHLPGJLCKTLAQSALNOIPHBTUYRRGHSEZNKMZUKAIIHATZTTIYLACTADTNINWCSUFBYNJKXAAJNAGFEVSCFUHOAJUQMISGBBSXQBYLMRASZACPLIUGLQYUZBNIZXXJXNNTSCKJZJZJMMYFMVXJAOPVEFHWHBYOAPKQEDYDDTRPBLPORURSKNPBTAMZKKZRRDDCMRAYGLNJUIKQYNJAUCAQEKHCWXDQPDOHYCVAEXJYULGVWTOVQGSFIVKVUNQDEKHNGXJYYCSPVZULHKYWGQJGAQCLPSXNSERDNRJXROZMXTJTVOSSYQPVOTKHMBQAXIQXUXZLZTKSOHUJRTAIMPDESFQJBJIFGYBEBNUIICFJTEQFVSYRWWJZISSAIMGCUSLEIACQXJIPDTILJQRBLDLIRSIEWJPLNAIDVVIXJQTQJDOZLDBBEEMVMVEQLHJZTCOUOSTCGROMEKRINQBGVGLJHVEAONQKRTJJTLGBKRNYOIXIRSLFSZFQIVGKAFLGKCTVBVKSIPWOMQXLYQXHLBCEUHBJBFNHOFCGPGWDSEFFYCTHMLPCQEJGSKWJKBKBBMIFNURNWYHEVSOQZMTVZGFIQAJFRGYUZXNRTXECTCNLYOISBGLPDBJBSLXLPOYMRCXMDTQHCNLVTQDWFTUZGBDXSYSCWBRGUOSTBELNVTAQDMKMIHMOXQTQLXVLSSSISVQVVZOTOYQRYUYQWOKNNQCQGGYSRQPKRCCVYHXSJMHOQOYOCWCRIPLARJOYIQRMMPMUEQBSBLJDDWRUMAUCZFZIODPUDHEEXALBWPIYPMDJLMWTGDRZHPXNEOFHQZJDMURGVMRWDOTUWYKNLRBVUVTNHIOUVQITGYFGFIEONBAAPYHWPCRMEHXCPKIJZFIAYFVOXKPASYIWXMRAHUWLAOOVREJHPBIIQMDPTEFNNGFZTQHHIFMTHLXKQBHISDXBGOTYSPNVUSLDLFCNOGNDBCJXQDUSSOEGPWPRFUSSJQHKHBHPHTJKYWSEBAAVJAUPVDBXFITSYOJEVYCPXWYXFKZDESBNOACIXWTRHQHFIMUKKDINHWYXNJKMOPBHOPLFMPLQJYFIAZKXXDMZBNDUOAXJDAEVIBEQACBDXWRGSFVPLKHFPNLPFLZNDTLUWRIGJJTTHZHPOWRYLZZYVNATBAWWXBYDUUSBDHBGGAWQVLRBMPGKNZVLKEEAVEKLVQUTZZDRQONOWWVWJFXXLTXMXKKPZKYFZSVYVKVNYCVPNPQBRIBPEMMAYFPNIWAZHBJEZMENVESSYPPASIFGSSFWVEUXASVKMPXZVZOOPTVOZCYQPXANFTSVGLUXXMWTERTADXMAMTXRDQNPLOAGMMGETHVBNEXECQIDNZPSZHLHPSOEMJFRDPFAWNFHYQUWIWNUQZTLHKLUBMJMQIMOYUMBUPRIGZZXVKJJOXHYUSUKLAIYMPOPZYVEWMVQMSOISXZUHSQAZGGGNMRUXDKVGPUCMTZOSJLRPDWAEKOXTRAWMHIJIZUQRLNKIEYLAIIYMTDFTXJUUCJIPOZZHGBIZWMNCRCABVMQWAFVMUXYYBVCIURGYAPTMPVLCNYUHAYTABVKSPWISDSDSPXYSOPDEMQDGQAXUOOOMPKYSOKVZZHDPMVNURNAULFUTCUKWGTXNQXMUKBXNLIDVYSEWBWMSNSRFPXXFTMJUEDKSDMNBKLSRNJPWVPQWMXXTFFGTBDBJIFNRVWZTBDJRBAZXOTGFQVYQPGRDOJJGJVQIWLDVJINOEEBSCJCISYVUTVHVMIYCOYSZFEXXAFMKAXSXWKTFCFAILJABWUNYLERKSNHSAQNHOVLTHJVSUMBZQSJHRLLOVOYUBXMXBYUNVAADRVBEJOORBYHWUNRHNIXRHWODLXNGPQURFPIQDFTESWNRNYFNRLLTCTMJVSJXPFQSGPZEQQTREWWSCEICEANFVODTIOKDWTZOQOBOIIOXGOMODFASZWZGUZZYQITDDCINEMYPCBFELHMHYPBTBWMCHQHYGFTVAOFPXWMPMFBCFNCLQEXJGVZPQBXCQOSKJDXWHIMEUWXOPZAFASCSXAWAROBLPMAMKLRWLZNPLGSPUZVNUBPUDIBPTDSLAAGXAAACQRSFVHCLAEDSMLKJAQSOQGFPOVIGXFVHLTPWPTOJSARDOZOGRLTULBERIYWIREEBJDDKDHPYLEYPYLEVVGLKCKUBMYGXZQMEEYEHJEHKNBKPRSVDGJOIZZGJSZEBTAQQGZWYFGDCBKDGXZURJPOAHRHDPQEXZSRPGVDUTABOGKWKUEHFZWHVAMSNTZUVCRQZPLXHYKIAOAPJZKZNMLSNEZSSKDLOSIYFAWAZNBUWENOVCSFKFUHNTGLVESXSRRNZKBHZKHZMVKJEVSRBDICLCKMSGPGNGYCKZVGYSVWCGWAYJOKQACTFXTIVFBDWPRUFIVTGGZHBPVLXFKISDNEOGDSEENJLEWROBJHPPPJCZYXEAIQANAZTKSNPFWYHDJVIPGWZZNMNNXWRAIIEICSCDHRYZVRHTOPRRATXUFCITHOKIOGUDGGZPVJCTBAHNZDWTOKIATSRIQZWEDRRFZBRKGVYNBBFOMOIAWWMMJIQVHDLNSVWNWBKTEHYKEVHACVDFLMNKRLJMIJVFXDVDYDMVKJSBPMCGMNFTSEUMHBDIOHZCJVPAYXQWDPYCHQCTUDLKEDTBJDUQBZWXVOXJLAJSTAOQNRRRPXCNDMWHLWDYGNNORDXMUJNZLKEAMDXANOKVBVPLRWXZIJPJKULODEULUEPKSLYIUZYWPYYFOCICAZYEWQYULJLFMTHLIEOLXUYPKQPEMFJJPSWULKNGYTFFIXVOIYUUSYBDMYGPUGZHUERHLFELEMNNAVEFSUQIKNYEDQTXYEKPWPDPCUUIMOSYTASPBMINXPVBCBQOLOSVBRPPGPYVIXLSXHQDRPHMJPIHERRWHDWOSAPJFTERGJSZLZWCIHWCUEGFCPSAQJNNFFMVVEUPTMNEFBHOHJBCAOCDWJYAYLNVZECIUCLQUQEDNWKYFYMGRFMZXQPEJCIXXPPQGVUAWUTGRMEZJKTEOFJBNRVZZKVJTACFXJJOKISAVSGRSLRYXFQGRMDSQWPTAJBQZVETHULJBDATXGHFZQRW";
            var b =
                "";
            var d=morganAndString(a, b);
            //var savedBlogData = await _context.Blogs.AddAsync(new Blog()
            //{
            //    Url = "Blog url 1",

            //});
            var cc = await _context.MainClassification.Include(m => m.SubClassification).Where(m => m.FieldId == 1)
                .Select(m => new
                {
                    m.Name,
                    m.FieldId,
                    m.Order,
                    subList = m.SubClassification.Select(n => new { n.Name, n.Id })
                })
                .ToListAsync();

            var query = await _context.ConstructionDrawings.Where(m => m.FieldId == 1 && m.ReviewDrawings.Any(k => k.AdvanceSharingFlag))
                .Select(m =>
                     new
                     {
                         LatestReview = m.ReviewDrawings.OrderByDescending(m => m.Name).ToList(),
                         SubCat = m.SubClassification.Name,
                         Cat = m.SubClassification.MainClassification.Name,
                     }
                ).ToListAsync();
            var data = query.FirstOrDefault()?.LatestReview;
            return Ok();
        }


        public static string morganAndString(string a, string b)
        {
            var result = "";
            var itemLower = a;
            var itemUpper = b;
            if (a.Length > b.Length)
            {
                itemLower = b;
                itemUpper = a;
            }

            var aIndex = 0;
            var bIndex = 0;
            var equalTime = 0;
            while (aIndex < a.Length && bIndex < b.Length)
            {

                if (a[aIndex] < b[bIndex])
                {
                    result += a[aIndex];
                    aIndex++;
                }

                if (a[aIndex] == b[bIndex])
                {
                    if (equalTime % 2 == 0)
                    {
                        aIndex++;
                        result += a[aIndex];
                    }
                    else
                    {
                        result += b[bIndex];
                        bIndex ++;
                    }

                    equalTime++;
                }
                else
                {
                    result += b[bIndex];
                    bIndex++;
                }
            }

            if (bIndex < b.Length)
            {
                result += b.Substring(bIndex);
            }
            else
            {
                result += a.Substring(aIndex);
            }
            return result;
        }


        [Route("update")]
        public async Task<ActionResult> Update()
        {
            var items = await _context.MainClassification.Include(m => m.SubClassification).FirstOrDefaultAsync(m => m.Id == 3);
            //var savedBlogData = await _context.Blogs.AddAsync(new Blog()
            //{
            //    Url = "Blog url 1",

            //});
            var dateString = DateTime.Now.ToString("h:mm:ss tt zz");
            var item = await _context.MainClassification.AsTracking().FirstOrDefaultAsync();
            if (item != null)
            {
                item.SubClassification = new List<SubClassification>()
                {
                    new()
                    {
                        Id = 1,
                        Name = $"sub 1 {dateString}",

                    },
                };
            }

            await _context.SaveChangesAsync();
            return Ok();
        }
    }
}
